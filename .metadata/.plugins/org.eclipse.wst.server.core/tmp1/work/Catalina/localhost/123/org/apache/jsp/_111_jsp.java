/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2017-12-26 05:20:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import haibowen.MyWebSocket;
import java.util.*;

public final class _111_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("haibowen.MyWebSocket");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

String path = request.getContextPath();
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
String a=(String)request.getRemoteAddr();
application.setAttribute("wenhaibo",a);



      out.write("\r\n");
      out.write(" \r\n");
      out.write("<!DOCTYPE HTML>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <base href=\"");
      out.print(basePath);
      out.write("\">\r\n");
      out.write("    <title>My WebSocket</title>\r\n");
      out.write("  </head>\r\n");
      out.write("   \r\n");
      out.write("  <body>\r\n");
      out.write("    Welcome<br/>\r\n");
      out.write("    <input id=\"text\" type=\"text\" /><button onclick=\"send()\">Send</button>    <button onclick=\"closeWebSocket()\">Close</button>\r\n");
      out.write("    <div id=\"message\">\r\n");
      out.write("    </div>\r\n");
      out.write("  </body>\r\n");
      out.write("   \r\n");
      out.write("  <script type=\"text/javascript\">\r\n");
      out.write("      var websocket = null;\r\n");
      out.write("       \r\n");
      out.write("      //判断当前浏览器是否支持WebSocket\r\n");
      out.write("      if('WebSocket' in window){\r\n");
      out.write("          websocket = new WebSocket(\"ws://192.168.1.7:8080/websockettest/websocket\");\r\n");
      out.write("      }\r\n");
      out.write("      else{\r\n");
      out.write("          alert('Not support websocket')\r\n");
      out.write("      }\r\n");
      out.write("       \r\n");
      out.write("      //连接发生错误的回调方法\r\n");
      out.write("      websocket.onerror = function(){\r\n");
      out.write("          setMessageInnerHTML(\"error\");\r\n");
      out.write("      };\r\n");
      out.write("       \r\n");
      out.write("      //连接成功建立的回调方法\r\n");
      out.write("      websocket.onopen = function(event){\r\n");
      out.write("          setMessageInnerHTML(\"open\");\r\n");
      out.write("      }\r\n");
      out.write("       \r\n");
      out.write("      //接收到消息的回调方法\r\n");
      out.write("      websocket.onmessage = function(event){\r\n");
      out.write("          setMessageInnerHTML(event.data);\r\n");
      out.write("      }\r\n");
      out.write("       \r\n");
      out.write("      //连接关闭的回调方法\r\n");
      out.write("      websocket.onclose = function(){\r\n");
      out.write("          setMessageInnerHTML(\"close\");\r\n");
      out.write("      }\r\n");
      out.write("       \r\n");
      out.write("      //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\r\n");
      out.write("      window.onbeforeunload = function(){\r\n");
      out.write("          websocket.close();\r\n");
      out.write("      }\r\n");
      out.write("       \r\n");
      out.write("      //将消息显示在网页上\r\n");
      out.write("      function setMessageInnerHTML(innerHTML){\r\n");
      out.write("          document.getElementById('message').innerHTML +=innerHTML + '<br/>';\r\n");
      out.write("      }\r\n");
      out.write("       \r\n");
      out.write("      //关闭连接\r\n");
      out.write("      function closeWebSocket(){\r\n");
      out.write("          websocket.close();\r\n");
      out.write("      }\r\n");
      out.write("       \r\n");
      out.write("      //发送消息\r\n");
      out.write("      function send(){\r\n");
      out.write("          var message = document.getElementById('text').value;\r\n");
      out.write("          websocket.send(message);\r\n");
      out.write("      }\r\n");
      out.write("  </script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
